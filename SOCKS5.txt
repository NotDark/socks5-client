

// The client connects to the server, and sends a version
// identifier/method selection message:
// +----+----------+----------+
// |VER | NMETHODS | METHODS  |
// +----+----------+----------+
// | 1  |    1     | 1 to 255 |
// +----+----------+----------+
//

// The server selects from one of the methods given in METHODS, and
// sends a METHOD selection message:
// +----+--------+
// |VER | METHOD |
// +----+--------+
// | 1  |   1    |
// +----+--------+

// Once the method-dependent subnegotiation has completed, the client
// sends the request details.  If the negotiated method includes
// encapsulation for purposes of integrity checking and/or
// confidentiality, these requests MUST be encapsulated in the method-
// dependent encapsulation.
//
// The SOCKS request is formed as follows:
//
//      +----+-----+-------+------+----------+----------+
//      |VER | CMD |  RSV  | ATYP | DST.ADDR | DST.PORT |
//      +----+-----+-------+------+----------+----------+
//      | 1  |  1  | X'00' |  1   | Variable |    2     |
//      +----+-----+-------+------+----------+----------+
//
//   Where:
//
//    o  VER    protocol version: X'05'
//    o  CMD
//       o  CONNECT X'01'
//       o  BIND X'02'
//       o  UDP ASSOCIATE X'03'
//    o  RSV    RESERVED
//    o  ATYP   address type of following address
//       o  IP V4 address: X'01'
//       o  DOMAINNAME: X'03'
//       o  IP V6 address: X'04'
//    o  DST.ADDR       desired destination address
//    o  DST.PORT desired destination port in network octet
//       order
//
//  Addressing
//
//  In an address field (DST.ADDR, BND.ADDR), the ATYP field specifies
//  the type of address contained within the field:
//
//         o  X'01'
//  the address is a version-4 IP address, with a length of 4 octets
//
//         o  X'03'
//  the address field contains a fully-qualified domain name.  The first
//  octet of the address field contains the number of octets of name that
//  follow, there is no terminating NUL octet.
//
//         o  X'04'
//  the address is a version-6 IP address, with a length of 16 octets.
//
/*
The SOCKS5 protocol is defined in RFC 1928. It is an extension of the SOCKS4 protocol;
it offers more choices for authentication and adds support for IPv6 and UDP, the latter
of which can be used for DNS lookups. The initial handshake consists of the following:

Client connects and sends a greeting, which includes a list of authentication methods supported.
Server chooses one of the methods (or sends a failure response if none of them are acceptable).
Several messages may now pass between the client and the server, depending on the authentication method chosen.
Client sends a connection request similar to SOCKS4.
Server responds similar to SOCKS4.
The authentication methods supported are numbered as follows:

0x00: No authentication
0x01: GSSAPI[9]
0x02: Username/password[10]
0x03–0x7F: methods assigned by IANA[11]
0x80–0xFE: methods reserved for private use
The initial greeting from the client is

field 1: SOCKS version number (must be 0x05 for this version)
field 2: number of authentication methods supported, 1 byte
field 3: authentication methods, variable length, 1 byte per method supported

The server's choice is communicated:
field 1: SOCKS version, 1 byte (0x05 for this version)
field 2: chosen authentication method, 1 byte, or 0xFF if no acceptable methods were offered
The subsequent authentication is method-dependent. Username and password authentication (method 0x02) is described in RFC 1929:

For username/password authentication the client's authentication request is
field 1: version number, 1 byte (must be 0x01)
field 2: username length, 1 byte
field 3: username
field 4: password length, 1 byte
field 5: password

Server response for username/password authentication:
field 1: version, 1 byte
field 2: status code, 1 byte
0x00 = success
any other value = failure, connection must be closed
The client's connection request is

field 1: SOCKS version number, 1 byte (must be 0x05 for this version)
field 2: command code, 1 byte:
0x01 = establish a TCP/IP stream connection
0x02 = establish a TCP/IP port binding
0x03 = associate a UDP port
field 3: reserved, must be 0x00
field 4: address type, 1 byte:
0x01 = IPv4 address
0x03 = Domain name
0x04 = IPv6 address
field 5: destination address of
4 bytes for IPv4 address
1 byte of name length followed by the name for domain name
16 bytes for IPv6 address
field 6: port number in a network byte order, 2 bytes
Server response:

field 1: SOCKS protocol version, 1 byte (0x05 for this version)
field 2: status, 1 byte:
0x00 = request granted
0x01 = general failure
0x02 = connection not allowed by ruleset
0x03 = network unreachable
0x04 = host unreachable
0x05 = connection refused by destination host
0x06 = TTL expired
0x07 = command not supported / protocol error
0x08 = address type not supported
field 3: reserved, must be 0x00
field 4: address type, 1 byte:
0x01 = IPv4 address
0x03 = Domain name
0x04 = IPv6 address
field 5: destination address of
4 bytes for IPv4 address
1 byte of name length followed by the name for domain name
16 bytes for IPv6 address
field 6: network byte order port number, 2 bytes
*/

